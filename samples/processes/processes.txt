Overview of the Process Framework
11/09/2024
Welcome to the Process Framework within Microsoft's Semantic Kernel—a cutting-edge approach designed to optimize AI integration with your business processes. This framework empowers developers to efficiently create, manage, and deploy business processes while leveraging the powerful capabilities of AI, alongside your existing code and systems.

A Process is a structured sequence of activities or tasks that deliver a service or product, adding value in alignment with specific business goals for customers.

 Note

Process Framework package is currently experimental and is subject to change until it is moved to preview and GA.

Introduction to the Process Framework
The Process Framework provides a robust solution for automating complex workflows. Each step within the framework performs tasks by invoking user-defined Kernel Functions, utilizing an event-driven model to manage workflow execution.

By embedding AI into your business processes, you can significantly enhance productivity and decision-making capabilities. With the Process Framework, you benefit from seamless AI integration, facilitating smarter and more responsive workflows. This framework streamlines operations, fosters improved collaboration between business units, and boosts overall efficiency.

Key Features
Leverage Semantic Kernel: Steps can utilize one or multiple Kernel Functions, enabling you to tap into all aspects of Semantic Kernel within your processes.
Reusability & Flexibility: Steps and processes can be reused across different applications, promoting modularity and scalability.
Event-Driven Architecture: Utilize events and metadata to trigger actions and transitions between process steps effectively.
Full Control and Auditability: Maintain control of processes in a defined and repeatable manner, complete with audit capabilities through Open Telemetry.
Core Concepts
Process: A collection of steps arranged to achieve a specific business goal for customers.
Step: An activity within a process that has defined inputs and outputs, contributing to a larger goal.
Pattern: The specific sequence type that dictates how steps are executed for the process to be fully completed.
Business Process Examples
Business processes are a part of our daily routines. Here are three examples you might have encountered this week:

Account Opening: This process includes multiple steps such as credit pulls and ratings, fraud detection, creating customer accounts in core systems, and sending welcome information to the customer, including their customer ID.
Food Delivery: Ordering food for delivery is a familiar process. From receiving the order via phone, website, or app, to preparing each food item, ensuring quality control, driver assignment, and final delivery, there are many steps in this process that can be streamlined.
Support Ticket: We have all submitted support tickets—whether for new services, IT support, or other needs. This process can involve multiple subprocesses based on business and customer requirements, ultimately aiming for satisfaction by addressing customer needs effectively.
Getting Started
Are you ready to harness the power of the Process Framework?

Begin your journey by exploring our .NET samples and Python Python samples on GitHub.

By diving into the Process Framework, developers can transform traditional workflows into intelligent, adaptive systems. Start building with the tools at your disposal and redefine what's possible with AI-driven business processes.

Core Components of the Process Framework
09/28/2024
The Process Framework is built upon a modular architecture that enables developers to construct sophisticated workflows through its core components. Understanding these components is essential for effectively leveraging the framework.

Process
A Process serves as the overarching container that orchestrates the execution of Steps. It defines the flow and routing of data between Steps, ensuring that process goals are achieved efficiently. Processes handle inputs and outputs, providing flexibility and scalability across various workflows.

Process Features
Stateful: Supports querying information such as tracking status and percent completion, as well as the ability to pause and resume.
Reusable: A Process can be invoked within other processes, promoting modularity and reusability.
Event Driven: Employs event-based flow with listeners to route data to Steps and other Processes.
Scalable: Utilizes well-established runtimes for global scalability and rollouts.
Cloud Event Integrated: Incorporates industry-standard eventing for triggering a Process or Step.
Creating A Process
To create a new Process, add the Process Package to your project and define a name for your process.

Step
Steps are the fundamental building blocks within a Process. Each Step corresponds to a discrete unit of work and encapsulates one or more Kernel Functions. Steps can be created independently of their use in specific Processes, enhancing their reusability. They emit events based on the work performed, which can trigger subsequent Steps.

Step Features
Stateful: Facilitates tracking information such as status and defined tags.
Reusable: Steps can be employed across multiple Processes.
Dynamic: Steps can be created dynamically by a Process as needed, depending on the required pattern.
Flexible: Offers different types of Steps for developers by leveraging Kernel Functions, including Code-only, API calls, AI Agents, and Human-in-the-loop.
Auditable: Telemetry is enabled across both Steps and Processes.
Defining a Step
To create a Step, define a public class to name the Step and add it to the KernelStepBase. Within your class, you can incorporate one or multiple Kernel Functions.

Register a Step into a Process
Once your class is created, you need to register it within your Process. For the first Step in the Process, add isEntryPoint: true so the Process knows where to start.

Step Events
Steps have several events available, including:

OnEvent: Triggered when the class completes its execution.
OnFunctionResult: Activated when the defined Kernel Function emits results, allowing output to be sent to one or many Steps.
SendOutputTo: Defines the Step and Input for sending results to a subsequent Step.
Pattern
Patterns standardize common process flows, simplifying the implementation of frequently used operations. They promote a consistent approach to solving recurring problems across various implementations, enhancing both maintainability and readability.

Pattern Types
Fan In: The input for the next Step is supported by multiple outputs from previous Steps.
Fan Out: The output of previous Steps is directed into multiple Steps further down the Process.
Cycle: Steps continue to loop until completion based on input and output.
Map Reduce: Outputs from a Step are consolidated into a smaller amount and directed to the next Step's input.
Setting up a Pattern
Once your class is created for your Step and registered within the Process, you can define the events that should be sent downstream to other Steps or set conditions for Steps to be restarted based on the output from your Step.

